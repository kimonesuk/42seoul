ft_printf 구조
- ft_printf
- whie ~ ft_strchr(문자열, 문자)(% 판별)
	- print_saved (문자열, 길이)(%이전 출력, rtn += 길이) - new_structs (구조체)(structs 초기화, precision = -1, rtn은 n의 값)
	- format_parser (현재 문자 위치, 구조체, 가변인자 주소) (format 내용 구조체에 저장)
		- while ("diuoxXcsp%n"가 아닐떄)
			- flag_parser (문자 위치, 구조체)(flag 판별, 없으면 0)
			- width_parser (문자 위치, 구조체, 가변인자 주소)(width 판별, 없으면 0)
				- 숫자이고 0이 아닌경우 (ft_isdigit(문자))(width 초기화)
					- while(숫자일때)
						- width = width * 10 + (현재 문자 - 48(정수변환))(두자리수 이상일 경우)
						- 다음 주소로 이동
					- 숫자가 아닌 경우, 이전 주소로 이동(왜냐하면 format_parser에서 다음주소로 이동시키기 때문에)
				- *인 경우
					- 가변인자 읽어오기
					- 가변인자가 음수인 경우
						- 양수로 변환 및 minus플래그 증가
			- precise_parser (문자위치, 구조체, 가변인자 주소)(precision 판별, 없으면 0)
				- .이 존재하는 경우(precision 초기화)
					- 다음 주소로 이동
					- *인 경우 (음수인 경우 무시)
					- 숫자인 경우
					- .만 있는 경우 (0과 동일하게 처리)
				- .없는 경우(precision이 없는 경우)(0 return)
				- precision 없는/음수 경우 : -1, ./.0 : 0 
			- length_parser (문자위치, 구조체)(lenth 판별, 없으면 0)
			- 현재주소가 format형식도 서식지정자도 아닌경우 while문 종료(chk_flag <= 0, break;)
			- 다음 주소로 이동
		- 현재주소의 값을 구조체-서식지정자 위치에 저장 (서식지정자인 경우 || (format&서식지정자 아닌 경우))
		- 다음 주소로 이동 및 종료
	- print_format (구조체, 가변인자 주소)(출력한 문자 길이 return, rtn += return)
		- diuoxX인 경우 - int_print(구조체, 가변인자 주소)
		- sc인 경우 - str_print(구조체, 가변인자 주소)
		- 그외(n, %, p , ...) - etc_print(구조체, 가변인자 주소)
	- free(구조체)
- print_saved (문자열, ft_strlen(문자열))(\0까지(포함X) 나머지 출력, rtn += 길이)
= rtn = 출력한 문자 길이(\0제외)

-int_print(구조체, 가변인자 주소)(서식지정자가 d, i, u, o, x, X인 경우 출력)
	-d, i인 경우
		- rtn = width or precision or len (if number가 존재할 경우 + 1/2)
		- 
	-u, o, x, X인 경우
		- rtn = width or precision or len (if number가 존재할 경우 + 1/2)
-str_print(구조체, 가변인자 주소)(서식지정자가 c, s인 경우 출력)
	-c인 경우 : rtn = width or 1(c는 precision 무시)
	-s인 경우 : rtn = width or precision(문자열 길이보다 작은경우 자름) or 문자열 길이
-etc_print(구조체, 가변인자 주소)(서식지정자가 n, %, p, ...인 경우 출력)
	-%과 그외인경우(서식지정자가 아닌 경우) : rtn = width or 1(precision 무시)
	-n인 경우 : rtn = 0, n의 값은 가변인자에 해당하는 주소에 지금까지 출력한 문자수 입력
	-p인 경우 : rtn = width or precision or len(len + 2) 중 최대
		(width, precision < len + 2인 경우 무시)
		(width > len/precision인 경우 width - len/precision - 2만큼 ' ' 출력)
		(0width인 경우 precision > len과 동일하게 처리)

lu, llu

///////////////////////////

- width, precision
	- return = 글자수
	- width 문자열의 폭
	- precision 숫자의 정확도(숫자의 폭)

- flag : +, -,  , 0 (#)
	- + : 양수 +, 음수 - (+ > ' ')
	- - : 왼쪽 정렬 (- > 0) (but precision > -)
	- ' ' : 양수 공백, 음수 -
	- 0 : 빈칸 0으로 채우기

- 양수, 8진법, 16진법 flag
	- # : 0, 0x, 0X 추가 (정밀도 앞 만약 witdh 와 0이 있는 경우 제일 앞)
	- - : 인식
	- ' ', + : 무시
	- 0 : width만 있을때 인식 (precision, -와 있으면 무시)
	- width : 전체 폭(숫자 길이 보다 짧은 경우 무시)
	- precision : 숫자 폭(숫자 길이 보다 긴 경우 0으로 채움, 짧은 경우 무시)
- 정수 flag
	- # : 무시
	- ' ', +, -, 0 인식
	- 0 : width만 있을때 인식 (precision, -와 있으면 무시)
	- width :	전체 폭(숫자 길이 보다 짧은 경우 무시, 긴 경우 공백)
	- precision :	숫자 폭(숫자 길이 보다 긴 경우 0으로 채움, 짧은 경우 무시)

- 구현한 서식지정자
	- d, i, u, o, x, X
	- c, s, n, %, p, etc